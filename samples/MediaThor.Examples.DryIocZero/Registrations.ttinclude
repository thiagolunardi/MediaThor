<#
// TODO:
// 1. Fill-in `GetContainerWithRegistrations` method below with creation of DryIoc `Container` and registrations.
// 2. Specify the resolution roots via `SpecifyResolutionRoots`, see example below.
// 3. Re-save the "Container.Generated.tt" file. Confirm the Visual Studio prompt if any.
// 4. Check the "Container.Generated.cs" for the generated results and issues.
#>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="ImTools" #>
<#
// TODO: Insert assemblies and namespaces with your services to register in container 
#>
<#@ assembly Name="$(SolutionDir)src\MediaThor\bin\Debug\net45\MediaThor.dll" #>
<#@ import namespace="MediaThor" #>
<#@ import namespace="MediaThor.Pipeline" #>
<#@ assembly Name="$(SolutionDir)samples\MediaThor.Examples\bin\Debug\net45\MediaThor.Examples.dll" #>
<#@ import namespace="MediaThor.Examples" #>
<#+
// TODO: Specify the container and registrations ...
IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    container.RegisterPlaceholder<System.IO.TextWriter>();
    container.RegisterPlaceholder<ServiceFactory>();

    container.RegisterMany(
        new[] { typeof(IMediator).GetAssembly(), typeof(Ping).GetAssembly() },
        Registrator.Interfaces);

    return container;
}

// TODO: Filter the root services to generate expressions for ...
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    var type = reg.ServiceType;
    return // Skip not relevant service types
        !(type.IsInterface() && type.Namespace?.StartsWith(nameof(MediaThor)) == true) ? null
        // Close known open-generics.
        // NOTE: This only needed because multiple services are located! via `MultiInstanceFactory` instead of to be injected as collection
        : type == typeof(IRequestHandler<,>) ? new []{
            reg.ToServiceInfo<IRequestHandler<Ping, Pong>>(),
            reg.ToServiceInfo<IRequestHandler<Jing, Unit>>()
        }
        : type == typeof(IPipelineBehavior<,>) ? new []{ 
            reg.ToServiceInfo<IPipelineBehavior<Ping, Pong>>(),
            reg.ToServiceInfo<IPipelineBehavior<Jing, Unit>>(),
        }
        : type == typeof(INotificationHandler<>) ? new []{ 
            reg.ToServiceInfo<INotificationHandler<Pinged>>(),
            reg.ToServiceInfo<INotificationHandler<Ponged>>(),
        }
        // Default treatment
        : reg.ToServiceInfo().One();
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = {};
#>